package ru.job4j.collection;

import java.util.*;

public class SimpleArrayList<T> implements SimpleList<T> {

    /**
     * container - Внутри контейнер должен базироваться на массиве Object[] container
     * Контейнер должен быть динамическим, т.е. при полном заполнении увеличиваться.
     * Увеличивать надо массив в два раза, потому что расширение это тяжелая операция.
     * Расширение массива вынесите в отдельный метод.
     */
    private T[] container;

    /**
     * size - Количество элементов
     * Это показатель, который нам говорит, сколько элементов в коллекции на данный момент.
     * Переменную, которая будет отвечать за это число можно применять для размещения
     * элементов (если говорить про динамический массив).
     */
    private int size;

    /**
     * modCount - счетчик изменений
     * Каждая операция, которая структурно модифицирует (добавление и удаление элементов)
     * коллекцию должна увеличивать этот счетчик.
     * Это показатель, который нам говорит, сколько раз коллекция была изменена с момента
     * ее создания. Например, вы создали коллекцию. Добавили в нее элемент, а потом удалили его.
     * Сколько элементов в коллекции? 0, а сколько раз ее изменили? 2 раза.
     * Это показатель всегда растет. При добавлении и удалении.
     * Его используют для того, чтобы на момент итерирования коллекцию держать в определенном
     * (defined) состоянии, иначе если во время итерирования был вставлен элемент, а мы
     * его обойти не смогли значит наш итератор работает не корректно
     * (на самом деле состояние коллекции не определено точно).
     */
    private int modCount;

    public SimpleArrayList(int capacity) {
        this.container = (T[]) new Object[capacity];
    }

    /**
     * add - Добавляет указанный элемент в конец этого списка (дополнительная операция).
     * @param value добавляемый элемент
     */
    @Override
    public void add(T value) {
        modCount++;
        if (size == container.length) {
            newSize();
        }
        container[size] = value;
        size++;
    }

    /**
     * логика увеличения размера контейнера
     * Реализована возможность увеличения контейнера с нулевой длиной
     */
    private void newSize() {
        if (size == 0) {
            container = Arrays.copyOf(container, 10);
        } else {
            container = Arrays.copyOf(container, container.length * 2);
        }
    }


    /**
     * set - Заменяет элемент в указанной позиции в этом списке указанным элементом.
     * В методах, где используется индекс нужно делать валидацию.
     * Индекс должен находиться в рамках добавленных элементов.
     * Например, у вас есть хранилище из 10 элементов. Вы добавили 3 элемента.
     * Каким может быть индекс? [0, 2].
     * Для проверки индекса используйте метод Objects.checkIndex()
     * @param index индекс заменяемого элемента
     * @param newValue новый элемент
     * @return возвращает замененный элемент
     */
    @Override
    public T set(int index, T newValue) {
        Objects.checkIndex(index, container.length);
        modCount++;
        T oldValue = container[index];
        container[index] = newValue;
        return oldValue;
    }

    /**
     * remove - Удаляет элемент в указанной позиции в этом списке
     * В методах, где используется индекс нужно делать валидацию.
     * Индекс должен находиться в рамках добавленных элементов.
     * Например, у вас есть хранилище из 10 элементов. Вы добавили 3 элемента.
     * Каким может быть индекс? [0, 2].
     * Для проверки индекса используйте метод Objects.checkIndex().
     * Для удаления нужно использовать метод System.arraycopy().
     * @param index индекс удаляемого элемента
     * @return возвращает удаленный элемент
     */
    @Override
    public T remove(int index) {
        Objects.checkIndex(index, container.length);
        modCount++;
        T rsl = container[index];
        System.arraycopy(
                container,
                index + 1,
                container,
                index,
                container.length - index - 1);
        container[container.length - 1] = null;
        size--;
        return rsl;
    }

    /**
     * get - Возвращает элемент в указанной позиции в этом списке.
     * В методах, где используется индекс нужно делать валидацию.
     * Индекс должен находиться в рамках добавленных элементов.
     * Например, у вас есть хранилище из 10 элементов. Вы добавили 3 элемента.
     * Каким может быть индекс? [0, 2].
     * Для проверки индекса используйте метод Objects.checkIndex()
     * @param index индекс элемента, который будем возвращать
     * @return Возвращает элемент в указанной позиции в этом списке.
     */
    @Override
    public T get(int index) {
        Objects.checkIndex(index, container.length);
        T rsl = container[index];
        return rsl;
    }

    /**
     * Количество элементов в этом списке.
     * @return Возвращает количество элементов в этом списке.
     */
    @Override
    public int size() {
        return size;
    }

    /**
     * Итератор должен реализовывать fail-fast поведение, т.е. если с момента создания
     * итератора в коллекцию добавили новый элемент, итератор должен кидать
     * ConcurrentModificationException.
     * Это достигается через введение счетчика изменений - modCount.
     * Каждая операция, которая структурно модифицирует (добавление и удаление элементов)
     * коллекцию должна увеличивать этот счетчик.
     * В свою очередь итератор запоминает значение этого счетчика на момент своего
     * создания (expectedModCount), а затем на каждой итерации сравнивает сохраненное
     * значение, с текущим значением поля modCount, если они отличаются,
     * то генерируется исключение.
     *
     * Итератор должен кидать два исключения:
     *
     * 1) NoSuchElementException. Относится к первому показателю - количеству элементов.
     * Тут просто. Если итератор "уперся", т.е. нет больше элементов, а клиент вызвал
     * этот метод, то этим исключение мы ему подчеркиваем, что элементов больше нет.
     * Такое поведение отлично демонстрируют задания из блока Iterator.
     *
     * 2) ConcurrentModificationException. Относится ко второму показателю - числу модификаций.
     * Чтобы кинуть это исключение заводят отдельную переменную в итераторе
     * expectedModCount = modCount и проверяют условие if (expectedModCount != modCount).
     * Если условие выполнено, значит на момент итерирования была изменена коллекция,
     * поэтому вылетает исключение. Это называется fail-fast поведение
     *
     * Вывод. Чтобы реализовать итератор вам нужны два поля. Каждое отвечает за свой показатель.
     * @return Возвращает итератор по элементам в этом списке в правильной последовательности.
     */
    @Override
    public Iterator<T> iterator() {
        return new Iterator<T>() {
            private int point;
            private int expectedModCount = modCount;

            /**
             * Метод проверяет есть ли следующий элемент
             * @return возвращает true, если следующий элемент существует
             */
            @Override
            public boolean hasNext() {
                if (expectedModCount != modCount) {
                    throw new ConcurrentModificationException();
                }
                return point < size && expectedModCount != 0;
            }

            /**
             * Метод возвращает первый элемент ячейки, второй вызов возвращает второй и т.д.
             * @return при каждом вызове возвращает следующий элемент в списке
             */
            @Override
            public T next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }
                return container[point++];
            }

        };
    }
}
